//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Inventario.Models.ModelBD
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class LocalDataEntities : DbContext
    {
        public LocalDataEntities()
            : base("name=LocalDataEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Empresa> Empresa { get; set; }
        public virtual DbSet<Usuario> Usuario { get; set; }
        public virtual DbSet<CatPresentacion> CatPresentacion { get; set; }
        public virtual DbSet<Medicamento> Medicamento { get; set; }
        public virtual DbSet<Movimientos> Movimientos { get; set; }
        public virtual DbSet<Existencia> Existencia { get; set; }
    
        public virtual int ActualizaExistencia(Nullable<int> idEmpresa, string nombre, Nullable<int> idPresentacion)
        {
            var idEmpresaParameter = idEmpresa.HasValue ?
                new ObjectParameter("IdEmpresa", idEmpresa) :
                new ObjectParameter("IdEmpresa", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var idPresentacionParameter = idPresentacion.HasValue ?
                new ObjectParameter("IdPresentacion", idPresentacion) :
                new ObjectParameter("IdPresentacion", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ActualizaExistencia", idEmpresaParameter, nombreParameter, idPresentacionParameter);
        }
    
        public virtual int EntradaSalida(Nullable<bool> esEntrada, Nullable<int> idEmpresa, Nullable<int> idUsuario, string nombre, Nullable<int> idPresentacion, string observaciones, Nullable<int> cantidad)
        {
            var esEntradaParameter = esEntrada.HasValue ?
                new ObjectParameter("EsEntrada", esEntrada) :
                new ObjectParameter("EsEntrada", typeof(bool));
    
            var idEmpresaParameter = idEmpresa.HasValue ?
                new ObjectParameter("IdEmpresa", idEmpresa) :
                new ObjectParameter("IdEmpresa", typeof(int));
    
            var idUsuarioParameter = idUsuario.HasValue ?
                new ObjectParameter("IdUsuario", idUsuario) :
                new ObjectParameter("IdUsuario", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var idPresentacionParameter = idPresentacion.HasValue ?
                new ObjectParameter("IdPresentacion", idPresentacion) :
                new ObjectParameter("IdPresentacion", typeof(int));
    
            var observacionesParameter = observaciones != null ?
                new ObjectParameter("Observaciones", observaciones) :
                new ObjectParameter("Observaciones", typeof(string));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("Cantidad", cantidad) :
                new ObjectParameter("Cantidad", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EntradaSalida", esEntradaParameter, idEmpresaParameter, idUsuarioParameter, nombreParameter, idPresentacionParameter, observacionesParameter, cantidadParameter);
        }
    }
}
